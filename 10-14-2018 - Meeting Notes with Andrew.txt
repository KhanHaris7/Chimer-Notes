Meeting notes with Andrew:

Questions:

Scalability of the application in the future:
- Enormous career fair about 2000 people who will be matching using the app

- Planning to create new instances of the app

- Creating from the admin panel


Dev Testing team? Who to go for technical questions ?
- Dominic Deques student at CU-Boulder
- Develops some tools --> code aspect


Spec Documentation:
- Need to make edits/refinements

(My Use Case) Career Fair information:
- Students editing the fields to input their information for matching purposes

- Watch out for overlapping: Employee information and sponsors 

-Student does not need to create login or user name to match with a potential employer at the career fair.

Next Steps:
- Continue to refine all the use cases and edge cases

- What happens if the student doesn't match with any employers

Possible Technology --> ?
- Specifications
- Design  architecture of the app
- How it is going to function
- Documentation
- Coding is the last step
- Where to host the app ?

By next meeting
- List the technologies to implement each our own use cases 

- App needs to be responsive as a web application independent of device type i.e. Iphone, Samsung or Android, etc, etc.

	---> Start implementation (coding) after finalizing the spec doc by November 1st (flexible)

- Head First Design Pattern (book) for implementation of code (useful)
- Focused on easy maintaince deployment

- Increased communication with Andrew on our progress, or if we have any doubts

***************************************************************************************************************************
Abdul Ghiasy PWA Architecture Notes

- App architecture notes
	--> Migrate an existing site to PWA
		--> Move too HTTPS protocols
		--> use caching strategies to improve performance online and reduce response times
			--> ex. Cache-aside method
				--> cache sits on the side and the application directly talks to both the cache and the database
					--> steps: (1) application checks cache
						   (2) if data found, indicate cache hit; read data and return to client
					           (3) if not found, indicate cache miss; query database to read data, return to client, and store in cache
		--> implement an app shell architecture
			--> makes it feel like a native application and reliable performance
		--> add to homescreen 
		--> add push notifications
		--> architectural patterns / caching strategies 
			--> Server-side rendering (SSR) 
				--> server returns a complete page
				--> page loads CSS, Javascript, and all content
				--> HARD TO DO OFFLINE BECAUSE SERVER RETURNS THE WHOLE PAGE
			--> Client-side rendering (CSR)
				--> server return template page with CSS & Javascript
				--> Javascript makes request to get content, add to page
				--> page updates reload only dynamic content

